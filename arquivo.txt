finalCode: 
from machine import Pin, ADC, sleep, UART, unique_id
from time import sleep
import utime
import uasyncio as asyncio



INT1 = Pin(2, Pin.OUT)
INT2 = Pin(0, Pin.OUT)
def MA(dir):
    if dir==0: INT1.off();INT2.off()
    elif dir==1: INT1.on();INT2.off()
    elif dir==2: INT1.off();INT2.on()




async def threadData():
    while(True):
        pass
        await asyncio.sleep_ms(500)
async def thread0():
    while(True):
        pass
        MA(2)
        await asyncio.sleep(1.00)
        MA(1)
        await asyncio.sleep(1.00)

        await asyncio.sleep(0.3)
def get_chip_id():
    id = unique_id()
    chip_id = 0
    for i in range(0, 17, 8):
        chip_id |= ((int.from_bytes(id, 'little') >> (40 - i)) & 0xff) << i
    last_six = str(chip_id)[-6:]
    device_name = 'ESP32 ' + last_six
    print('Device: ', device_name)
    return device_name
async def main():
    get_chip_id()
    asyncio.create_task(threadData())
    asyncio.create_task(thread0())
try:
    loop = asyncio.get_event_loop()
    loop.create_task(main())
    loop.run_forever()
except Exception as e:
    print('Erro: ', e)


    utime.sleep_ms(50)