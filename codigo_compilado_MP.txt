finalCode: 
from machine import Pin, ADC, sleep, UART, unique_id, reset
from time import sleep
import utime
import uasyncio as asyncio



import network
import ujson
import urequests
from umqtt.simple import MQTTClient
led_azul = Pin(2, Pin.OUT, value=0)
ssid = 'Rover'
password = 'Modelix2017'
wlan = network.WLAN(network.STA_IF)
wlan.active(True)
if wlan.isconnected():
    wlan.disconnect()
wlan.config(dhcp_hostname='')
maximo = 15
if not wlan.isconnected():
    tent = 0
    wlan.connect(ssid, password)
    while not wlan.isconnected():
        tent += 1
        if tent >= maximo:
            break
        utime.sleep_ms(750)
if wlan.isconnected():
    led_azul.on()
else:
    while True:
        led_azul.on()
        utime.sleep_ms(500)
        led_azul.off()
        utime.sleep_ms(500)
print('network config:', wlan.ifconfig())


async def threadData():
    while(True):
        pass
        await asyncio.sleep_ms(500)
async def thread0():
    while(True):
        pass

        await asyncio.sleep(10.00)
        url = 'https://APIMyoT-mqtt.leonuzzy.repl.co/comando'
        headers = {'Content-Type': 'application/json'}
        data = {'email': 'luciohf123@gmail.com', 'senha': '1234', 'ID': '323', 'trigger': '#mensagem vovoasasas' }
        r = urequests.post(url, headers=headers, data=ujson.dumps(data))
        print(r.text)

        await asyncio.sleep(10.00)
        url = 'https://APIMyoT-mqtt.leonuzzy.repl.co/comando'
        headers = {'Content-Type': 'application/json'}
        data = {'email': 'luciohf123@gmail.com', 'senha': '1234', 'ID': '323', 'trigger': '#mensagem dadadada' }
        r = urequests.post(url, headers=headers, data=ujson.dumps(data))
        print(r.text)


        await asyncio.sleep_ms(80)
async def thread1():
    while(True):
        pass



        await asyncio.sleep(10.00)
        url = 'https://zap.leonuzzy.repl.co/send-template-sucuri-katcode'
        headers = {'Content-Type': 'application/json'}
        data = {'phoneNumber': '5511973020144', 'parameter1': 'leon doidao', 'parameter2': f'123'}
        r = urequests.post(url, headers=headers, data=ujson.dumps(data))
        print(r.text)


        await asyncio.sleep_ms(80)




def get_chip_id():
    id = unique_id()
    chip_id = 0
    for i in range(0, 17, 8):
        chip_id |= ((int.from_bytes(id, 'little') >> (40 - i)) & 0xff) << i
    last_six = str(chip_id)[-6:]
    device_name = 'ESP32 ' + last_six
    print('Device: ', device_name)
    return device_name
async def main():
    get_chip_id()
    asyncio.create_task(threadData())
    asyncio.create_task(thread0())
    asyncio.create_task(thread1())
try:
    loop = asyncio.get_event_loop()
    loop.create_task(main())
    loop.run_forever()
except Exception as e:
    print('Erro: ', e)


    utime.sleep_ms(50)